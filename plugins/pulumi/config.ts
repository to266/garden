/*
 * Copyright (C) 2018-2022 Garden Technologies, Inc. <info@garden.io>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

import { DeepPrimitiveMap, joi, joiSparseArray, joiVariables } from "@garden-io/core/build/src/config/common"
import { baseBuildSpecSchema } from "@garden-io/core/build/src/config/module"
import { GenericProviderConfig, Provider, providerConfigBaseSchema } from "@garden-io/core/build/src/config/provider"
import { dependenciesSchema } from "@garden-io/core/build/src/config/service"
import { GardenModule } from "@garden-io/sdk/types"
import { dedent } from "@garden-io/sdk/util/string"
import { defaultPulumiVersion, supportedVersions } from "./cli"

type PulumiProviderConfig = GenericProviderConfig & {
  version: string | null
  previewDir: string | null
  orgName?: string
  pluginTaskConcurrencyLimit: number
}

export interface PulumiProvider extends Provider<PulumiProviderConfig> {}

export const pulumiProviderConfigSchema = providerConfigBaseSchema()
  .keys({
    // May be overridden by individual \`pulumi\` modules.
    version: joi
      .string()
      .allow(...supportedVersions, null)
      .only()
      .default(defaultPulumiVersion).description(dedent`
        The version of pulumi to use. Set to \`null\` to use whichever version of \`pulumi\` is on your PATH.
      `),
    previewDir: joi
      .posixPath()
      .subPathOnly()
      .description(
        dedent`
        Overrides the default plan directory path used when deploying with the \`deployFromPreview\` option for pulumi
        modules.

        Must be a relative path to a directory inside the project root.

        This option can be useful when you want to provide a folder of pre-approved pulumi plans to a CI pipeline step.
    `
      ),
    orgName: joi.string().description(dedent`
      The name of the pulumi organization to use. This option can also be set on the module level, in which case it
      overrides this provider-level option.
    `),
    pluginTaskConcurrencyLimit: joi.number().default(5).description(dedent`
      Sets the maximum task concurrency for the tasks generated by the pulumi plugin commands (e.g. when running
      \`garden plugins pulumi preview\`).

      Note: This limit is not applied when running built-in commands (e.g. \`garden deploy\`).
    `),
  })
  .unknown(false)

export interface PulumiModuleSpec {
  allowDestroy: boolean
  autoApply: boolean
  createStack: boolean
  dependencies: string[]
  pulumiVariables: DeepPrimitiveMap
  pulumiVarfiles: string[]
  orgName?: string | null
  cacheStatus: boolean
  stackReferences: string[]
  deployFromPreview: boolean
  root: string
  stack?: string
}

export interface PulumiModule extends GardenModule<PulumiModuleSpec> {}

// Validate that the path ends in .yaml or .yml
const yamlFileRegex = /(\.yaml)|(\.yml)$/

export const pulumiModuleSchema = () =>
  joi.object().keys({
    build: baseBuildSpecSchema(),
    allowDestroy: joi.boolean().default(true).description(dedent`
      If set to true, Garden will destroy the stack when calling \`garden delete env\` or \`garden delete service <module name>\`.
      This is useful to prevent unintentional destroys in production or shared environments.
    `),
    autoApply: joi.boolean().default(true).description(dedent`
      If set to false, deployments will fail unless a \`planPath\` is provided for this module. This is useful when deploying to
      production or shared environments, or when the module deploys infrastructure that you don't want to unintentionally update/create.
    `),
    createStack: joi.boolean().default(false).description(dedent`
      If set to true, Garden will automatically create the stack if it doesn't already exist.
    `),
    dependencies: dependenciesSchema(),
    root: joi.posixPath().subPathOnly().default(".").description(dedent`
      Specify the path to the Pulumi project root, relative to the module root.
    `),
    pulumiVariables: joiVariables().default({}).description(dedent`
      A map of config variables to use when applying the stack. These are merged with the contents of any \`pulumiVarfiles\` provided
      for this module. The module's stack config will be overwritten with the resulting merged config.
      Variables declared here override any conflicting config variables defined in this module's \`pulumiVarfiles\`.

      Note: \`pulumiVariables\` should not include runtime outputs from other pulumi modules when \`cacheStatus\` is set to true, since
      the outputs may change from the time the stack status of the dependency module is initially queried to when it's been deployed.

      Instead, use pulumi stack references when using the \`cacheStatus\` config option.
    `),
    pulumiVarfiles: joiSparseArray(joi.posixPath().pattern(yamlFileRegex)).description(
      dedent`
          Specify one or more paths (relative to the module root) to YAML files containing pulumi config variables.

          Templated paths that resolve to \`null\`, \`undefined\` or an empty string are ignored.

          Any Garden template strings in these varfiles will be resolved when the files are loaded.

          Each file must consist of a single YAML document, which must be a map (dictionary). Keys may contain any
          value type.

          If one or more varfiles is not found, no error is thrown (that varfile path is simply ignored).

          Note: There is no need to nest the variables under a \`config\` field as is done in a pulumi
          config. Simply specify all the config variables at the top level.
        `
    ),
    orgName: joi.string().optional().allow(null).description(dedent`
      The name of the pulumi organization to use. Overrides the \`orgName\` set on the pulumi provider (if any).
      To use the default org, set to null.
    `),
    cacheStatus: joi
      .boolean()
      .default(false)
      .description(
        dedent`
        When set to true, the pulumi stack will be tagged with the Garden service version when deploying. The tag
        will then be used for service status checks for this service. If the version doesn't change between deploys,
        the subsequent deploy is skipped.

        Note that this will not pick up changes to stack outputs referenced via stack references in your pulumi stack,
        unless they're referenced via template strings in the module configuration.

        When using stack references to other pulumi modules in your project, we recommend including them in this
        module's \`stackReferences\` config field (see the documentation for that field on this page).
    `
      ),
    stackReferences: joiSparseArray(joi.string())
      .description(
        dedent`
        When setting \`cacheStatus\` to true for this module, you should include all stack references used by this
        module's pulumi stack in this field.

        This lets Garden know to redeploy the pulumi stack if the output values of one or more of these stack references
        have changed since the last deployment.
      `
      )
      .example([
        "${runtime.services.some-pulumi-module.outputs.ip-address}",
        "${runtime.services.some-other-pulumi-module.outputs.database-url}",
      ]),
    deployFromPreview: joi
      .boolean()
      .default(false)
      .description(
        dedent`
        When set to true, will use pulumi plans generated by the \`garden plugins pulumi preview\` command when
        deploying, and will fail if no plan exists locally for the module.

        When this option is used, the pulumi plugin bypasses the status check altogether and passes the plan directly
        to \`pulumi up\` (via the \`--plan\` option, which is experimental as of March 2022). You should therefore
        take care to only use this config option when you're sure you want to apply the changes in the plan.

        This option is intended for two-phase pulumi deployments, where pulumi preview diffs are first reviewed (e.g.
        during code review).
      `
      ),
    stack: joi
      .string()
      .allow(null)
      .description("The name of the pulumi stack to use. Defaults to the current environment name."),
  })
